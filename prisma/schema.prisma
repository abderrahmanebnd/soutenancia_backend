generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(cuid())
  firstName      String    @db.VarChar(40)
  lastName       String?   @db.VarChar(40)
  password       String
  email          String    @unique @db.VarChar(100)
  role           Role      @default(student)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Student        Student?
  resetOtpHash   String?
  resetOtpExpiry DateTime?
}

model Student {
  id               String         @id @default(cuid())
  userId           String         @unique
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollmentNumber String?        @unique @db.VarChar(40)
  year             Int?
  speciality       String?        @db.VarChar(40)
  isLeader         Boolean        @default(false)
  isInTeam         Boolean        @default(false)
  customSkills     Json           @default("[]")
  skills           StudentSkill[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  TeamOffer       TeamOffer[]
  TeamApplication TeamApplication[]
  TeamMember      TeamMember[]
}

model Skill {
  id          String         @id @default(cuid())
  name        String         @unique @db.VarChar(40)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  teamOfferId String?
  students    StudentSkill[]
  teamOffers  TeamOffer[]
}

model StudentSkill {
  id        String  @id @default(cuid())
  studentId String
  skillId   String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  skill     Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([studentId, skillId]) // the student can have the same skill only once
}

model TeamOffer {
  id                       String          @id @default(cuid())
  title                    String          @db.VarChar(100)
  description              String          @db.VarChar(1000)
  status                   TeamOfferStatus @default(open)
  max_members              Int
  leader_id                String          @unique
  leader                   Student?        @relation(fields: [leader_id], references: [id], onDelete: Cascade)
  general_required_skills  Skill[]
  specific_required_skills Json[]          @default([])

  year       Int?
  speciality String? @db.VarChar(40)

  TeamApplication TeamApplication[]
  TeamMembers     TeamMember[]

  @@index([year, speciality]) // Optional: For faster querying
}

model TeamApplication {
  id          String            @id @default(cuid())
  teamOfferId String
  studentId   String
  status      ApplicationStatus @default(pending)
  message     String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  teamOffer TeamOffer @relation(fields: [teamOfferId], references: [id], onDelete: Cascade)
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([teamOfferId, studentId]) // a student can apply only once per team offer
}

model TeamMember {
  id          String   @id @default(cuid())
  teamOfferId String
  studentId   String
  joinedAt    DateTime @default(now())

  teamOffer TeamOffer @relation(fields: [teamOfferId], references: [id], onDelete: Cascade)
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([teamOfferId, studentId]) // a student can join only once per team offer
}

model TeamCompositionWindow {
  id         String   @id @default(cuid())
  speciality String?  @db.VarChar(40)
  year       Int?
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Role {
  student
  teacher
  admin
  entreprise
}

enum TeamOfferStatus {
  open
  closed
}

enum ApplicationStatus {
  pending
  accepted
  rejected
  canceled
}
