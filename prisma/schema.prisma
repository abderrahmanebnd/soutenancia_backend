generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(cuid())
  firstName      String    @db.VarChar(40)
  lastName       String?   @db.VarChar(40)
  password       String
  email          String    @unique @db.VarChar(100)
  role           Role      @default(student)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  resetOtpHash   String?
  resetOtpExpiry DateTime?
  Student        Student?
  Teacher        Teacher?
}

model Student {
  id               String         @id @default(cuid())
  userId           String         @unique
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollmentNumber String?        @unique @db.VarChar(40)
  specialityId     String?
  speciality       Speciality?    @relation(fields: [specialityId], references: [id])
  isLeader         Boolean        @default(false)
  isInTeam         Boolean        @default(false)
  customSkills     Json           @default("[]")
  skills           StudentSkill[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  TeamOffer       TeamOffer[]
  TeamApplication TeamApplication[]
  TeamMember      TeamMember[]
}

model Skill {
  id          String         @id @default(cuid())
  name        String         @unique @db.VarChar(40)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  teamOfferId String?
  students    StudentSkill[]
  teamOffers  TeamOffer[]
}

model StudentSkill {
  id        String  @id @default(cuid())
  studentId String
  skillId   String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  skill     Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([studentId, skillId]) // the student can have the same skill only once
}

model TeamOffer {
  id                       String          @id @default(cuid())
  title                    String          @db.VarChar(100)
  description              String          @db.VarChar(1000)
  status                   TeamOfferStatus @default(open)
  max_members              Int
  leader_id                String          @unique
  leader                   Student?        @relation(fields: [leader_id], references: [id], onDelete: Cascade)
  general_required_skills  Skill[]
  specific_required_skills Json[]          @default([])

  speciality   Speciality @relation(fields: [specialityId], references: [id])
  specialityId String     @db.VarChar(40)

  TeamApplication    TeamApplication[]
  TeamMembers        TeamMember[]
  ProjectApplication ProjectApplication[]

  assignedProjectId String?
  assignedProject   ProjectOffer? @relation(fields: [assignedProjectId], references: [id])
}

model TeamApplication {
  id          String            @id @default(cuid())
  teamOfferId String
  studentId   String
  status      ApplicationStatus @default(pending)
  message     String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  teamOffer TeamOffer @relation(fields: [teamOfferId], references: [id], onDelete: Cascade)
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([teamOfferId, studentId]) // a student can apply only once per team offer
}

model TeamMember {
  id          String   @id @default(cuid())
  teamOfferId String
  studentId   String
  joinedAt    DateTime @default(now())

  teamOffer TeamOffer @relation(fields: [teamOfferId], references: [id], onDelete: Cascade)
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([teamOfferId, studentId]) // a student can join only once per team offer
}

model TeamCompositionWindow {
  id           String     @id @default(cuid())
  specialityId String
  speciality   Speciality @relation(fields: [specialityId], references: [id])
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Teacher {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  department String? @db.VarChar(100) // 
  title      String? @db.VarChar(50) // "Prof.", "Dr.",
  bio        String? @db.VarChar(1000)
  // projects ProjectOffer[]

  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  projectOffers        ProjectOffer[]
  coSupervisedProjects ProjectOffer[] @relation("ProjectCoSupervisors")
}

model ProjectOffer {
  id             String          @id @default(cuid())
  title          String          @db.VarChar(150)
  description    String          @db.VarChar(1000)
  tools          String[]
  languages      String[]
  status         TeamOfferStatus @default(open)
  maxTeamsNumber Int             @default(1)
  year           Int?
  fileUrl        String?         @db.VarChar(255) // <-- Optional file field for the teacher
  teacherId      String
  teacher        Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  coSupervisors Teacher[] @relation("ProjectCoSupervisors")

  specialities Speciality[] @relation("ProjectSpecialities")

  assignmentType AssignmentType       @default(teacherApproval)
  applications   ProjectApplication[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  assignedTeams TeamOffer[]
}

model ProjectApplication {
  id      String            @id @default(cuid())
  message String?           @db.VarChar(1000)
  status  ApplicationStatus @default(pending)

  teamOfferId String
  teamOffer   TeamOffer @relation(fields: [teamOfferId], references: [id], onDelete: Cascade)

  projectOfferId String
  projectOffer   ProjectOffer @relation(fields: [projectOfferId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamOfferId, projectOfferId]) // a student applies only once
}

model ProjectSelectionWindow {
  id           String     @id @default(cuid())
  speciality   Speciality @relation(fields: [specialityId], references: [id])
  specialityId String
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Speciality {
  id   String @id @default(cuid())
  name String @db.VarChar(40)
  year Int

  projectOffers          ProjectOffer[]           @relation("ProjectSpecialities")
  Student                Student[]
  TeamOffer              TeamOffer[]
  TeamCompositionWindow  TeamCompositionWindow[]
  ProjectSelectionWindow ProjectSelectionWindow[]

  @@unique([name, year])
}

enum AssignmentType {
  auto
  teacherApproval
}

enum Role {
  student
  teacher
  admin
  entreprise
}

enum TeamOfferStatus {
  open
  closed
}

enum ApplicationStatus {
  pending
  accepted
  rejected
  canceled
}
